
// Generated by Cadence Genus(TM) Synthesis Solution 20.11-s111_1
// Generated on: Apr 25 2025 10:13:45 IST (Apr 25 2025 04:43:45 UTC)

// Verification Directory fv/DFF2 

module DFF2(D, in, clk, Q);
  input D, in, clk;
  output Q;
  wire D, in, clk;
  wire Q;
  wire and_out, q1;
  and g1 (and_out, q1, in);
  CDN_flop q1_reg(.clk (clk), .d (D), .sena (1'b1), .aclr (1'b0), .apre
       (1'b0), .srl (1'b0), .srd (1'b0), .q (q1));
  CDN_flop Q_reg(.clk (clk), .d (and_out), .sena (1'b1), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (Q));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
